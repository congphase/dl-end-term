# -*- coding: utf-8 -*-
"""server.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mxKw8yXilVUa_kB2H0402R8rFq_z0MND
"""

# Commented out IPython magic to ensure Python compatibility.
# Mount "My Drive" into /content/drive
from google.colab import drive

google_drive_dir = "Final_project"  # @param
#bml-notebooks/
drive.mount('/content/drive')

mount_point = "/content/drive/My Drive/{}".format(google_drive_dir)

# Change the root directory to your mount_point
# % cd '$mount_point'

import flask
import cv2
import numpy as np
import pickle
from keras import models, Model
from keras.models import model_from_json
from flask_ngrok import run_with_ngrok

app = flask.Flask(__name__)
run_with_ngrok(app)
model = None
svm = None

def load_model():
  global extract
  global svm

  json_file = open('keras_model/model.json', 'r')
  loaded_model_json = json_file.read()
  json_file.close()
  model = model_from_json(loaded_model_json)
  model.load_weights("keras_model/model.h5")

  extract = Model(model.inputs, model.layers[-3].output) # Dense(128,...)
  svm = pickle.load(open('saved_model/CNN_svmC1.pkl', 'rb'))

def recogFaceExpression(face_img):
    # load model
    emotions = {0: 'Angry', 1:'Fear', 2: 'Happy', 3: 'Sad', 4: 'Surprise', 5: 'Neutral'}
    face_img = cv2.resize(face_img, (48, 48))
    face_img = np.expand_dims(face_img,axis=[0,-1])
    face_img = face_img.astype('float32')/255
    img_feature = extract(face_img)
    y_pred =  svm.predict(img_feature)[0]

    # y_pred =  np.argmax(model.predict(face_img))
    return emotions[y_pred]

@app.route("/predict", methods=["POST"])
def predict():
  data = {"success": False}

  if flask.request.method == "POST":
    if flask.request.json:
      data = flask.request.json
      img = np.array(data['img']).astype(np.uint8)
      print(img.shape)
      r = recogFaceExpression(img)
      print(r)
      data["predictions"] = r
      data["success"] = True
  return flask.jsonify(data)


	# return flask.jsonify(data)
if __name__ == "__main__":
	load_model()
	app.run()

